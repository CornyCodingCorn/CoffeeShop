@inject NavigationManager NavigationManager

<header>
    <div class="header">
        <div class="brand">
            <img class="brand-icon" src="images/flag.jpg" alt="flag image"/>
            <h3 class="brand-text">@BrandName</h3>
        </div>
        <ToggleGroup @bind-SelectedIndex="_selectedIndex" Items="@GenerateItems()"></ToggleGroup>
    </div>
    <div class="pad pad-screen-media"></div>
</header>

@code {

    public class PageInfo
    {
        public string Name { get; init; } = string.Empty;
        public string Path { get; init; } = string.Empty;
        
        public PageInfo() {}

        public PageInfo(string name, string path)
        {
            Name = name;
            Path = path;
        }
    }
    
    [Parameter]
    public string BrandName { get; set; } = string.Empty;

    [Parameter]
    public PageInfo[] PagesInfo { get; set; } = default!;

    private int _selectedIndex = 0;
    
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender) return;
        UpdateUiToCurrentPath();
        
        NavigationManager.LocationChanged += (_, _) =>
        {
            UpdateUiToCurrentPath();
        };
    }

    private ToggleGroup.Item[] GenerateItems()
    {
        var items = new ToggleGroup.Item[PagesInfo.Length];

        for (var i = 0; i < PagesInfo.Length; i++)
        {
            var info = PagesInfo[i];
            items[i] = new ToggleGroup.Item
            {
                Name = info.Name,
                Toggled = _ => HandleToggle(info.Path)
            };
        }

        return items;
    }

    private void HandleToggle(string path)
    {
        NavigationManager.NavigateTo(path);
    }

    private void UpdateUiToCurrentPath()
    {
        var selectedPath = PagesInfo[_selectedIndex].Path;
        var currentPath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        if (selectedPath == currentPath) return;

        for (var i = 0; i < PagesInfo.Length; i++)
        {
            if (PagesInfo[i].Path != currentPath) continue;

            _selectedIndex = i;
            StateHasChanged();
        }
    }
}