@using CoffeeShop.Services.Interfaces

@inject INotificationService NoticeService

@implements IDisposable

<div class="notification-container">
    @foreach (var popUp in _popUps)
    {
        <NotificationPopUp @key="popUp.Id"
                           Title="@popUp.Title" 
                           Type="@popUp.Type"
                           Content="@popUp.Content" 
                           OnExpired="RemoveNotice" 
                           Duration="@_popUpsDuration"
                           DelayBeforeCallback="@_popUpsDelay"/>
    }
</div>

@code {

    public struct PopUp
    {
        public Guid Id { get; init; }
        public string Title { get; init; }
        public string Content { get; init; }
        public INotificationService.Type Type { get; init; }
    }

    private readonly List<PopUp> _popUps = new();
    private readonly float _popUpsDuration = 4;
    private readonly float _popUpsDelay = 1;
    
    public void AddNotice(INotificationService.Type type, string title, string content)
    {
        _popUps.Add(new PopUp
        {
            Id = Guid.NewGuid(),
            Title = title,
            Content = content,
            Type = type,
        });
        StateHasChanged();
    }

    public void RemoveNotice()
    {
        if (_popUps.Count == 0) return;
        _ = _popUps.Remove(_popUps.First());
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender) return;
        
        NoticeService.RegisterUiContainer(this);
    }
    
    public void Dispose()
    {   
        NoticeService.UnregisterUiContainer(this);
    }

}